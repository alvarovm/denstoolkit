/*
 *  solcudatools.cuh
 *
 *
 *  Created by Juan Manuel Solano Altamirano on 21/07/13.
 *  Copyright 2013. All rights reserved.
 *
 */

#ifndef _SOL_CUDA_TOOLS_CUH_
#define _SOL_CUDA_TOOLS_CUH_

#ifndef _HAVE_DEF_REAL_TYPE_
#define _HAVE_DEF_REAL_TYPE_
//typedef double real;
typedef double solreal;
//typedef float real;
#endif

#ifndef DEBUG
#define DEBUG 0
#endif

#ifndef _SOL_USE_SAFE_CHECKS_
#define _SOL_USE_SAFE_CHECKS_ 1
#endif

#ifndef BASETHREADSPERBLOCK
#define BASETHREADSPERBLOCK 16
#endif

#include <cuda_runtime.h>
#include <helper_cuda.h>
#include <helper_functions.h>

//**************************************************************************************************
//**************************************************************************************************
class cudaDual1DRealArray
//**************************************************************************************************
{
public:
   //***********************************************************************************************
   //***********************************************************************************************
   cudaDual1DRealArray();
   ~cudaDual1DRealArray();
   bool mountMe(int nn);
   void copyMeToGPU(void);
   void copyMeToHost(void);
   void zerosDev(void);
   void zerosHst(void);
   void setValDev(const solreal val);
   void setValHst(const solreal val);
   //***********************************************************************************************
   int dim,d_dim,bPG,tPB;
   solreal *h,*d;
   //***********************************************************************************************
private:
   //***********************************************************************************************
};
//**************************************************************************************************
class cudaDual1DIntArray
//**************************************************************************************************
{
public:
   //***********************************************************************************************
   //***********************************************************************************************
   cudaDual1DIntArray();
   ~cudaDual1DIntArray();
   bool mountMe(int nn);
   void copyMeToGPU(void);
   void copyMeToHost(void);
   void zerosDev(void);
   void zerosHst(void);
   //***********************************************************************************************
   int dim,d_dim,bPG,tPB;
   int *h,*d;
   //***********************************************************************************************
private:
   //***********************************************************************************************
};
//**************************************************************************************************
class cudaSingle1DRealArray
//**************************************************************************************************
{
public:
   //***********************************************************************************************
   //***********************************************************************************************
   cudaSingle1DRealArray();
   ~cudaSingle1DRealArray();
   bool mountMe(int nn);
   void zeros(void);
   //void copyMeToGPU(void);
   //void copyMeToHost(void);
   //***********************************************************************************************
   int dim,d_dim,bPG,tPB;
   solreal *d;
   //***********************************************************************************************
private:
   //***********************************************************************************************
};
//**************************************************************************************************
extern "C" bool alloc1DRealArrayInGPU(int ddim,solreal **dev_Ptr);
//**************************************************************************************************
extern "C" void dealloc1DRealArrayInGPU(solreal **dev_Ptr);
//**************************************************************************************************
extern "C" void copy1DRealArrayToGPU(int dim,solreal** hst_Ptr,solreal** dev_Ptr);
//**************************************************************************************************
extern "C" void copy1DRealArrayToHost(int dim,solreal** dev_Ptr,solreal** hst_Ptr);
//**************************************************************************************************
extern "C" bool alloc1DIntArrayInGPU(int dim,int **dev_Ptr);
//**************************************************************************************************
extern "C" void dealloc1DIntArrayInGPU(int **dev_Ptr);
//**************************************************************************************************
extern "C" void copy1DIntArrayToGPU(int dim,int** hst_Ptr,int** dev_Ptr);
//**************************************************************************************************
extern "C" void copy1DIntArrayToHost(int dim,int** dev_Ptr,int** hst_Ptr);
//**************************************************************************************************
void testFunctionInGPU(cudaDual1DRealArray &v);
//**************************************************************************************************
void testFunctionInGPU(cudaDual1DIntArray &v);
//**************************************************************************************************
extern "C" void testFunctionInGPUCSt(int dim,int bPerGrid,int tPerBlock,solreal **dev_Ptr);
//**************************************************************************************************
extern "C" void setRealArrayToZerosInGPU(int dim,int bPerGrid,int tPerBlock,solreal **dev_Ptr);
//**************************************************************************************************
extern "C" void setIntArrayToZerosInGPU(int dim,int bPerGrid,int tPerBlock,int **dev_Ptr);
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
//**************************************************************************************************
__global__ void krnlSumTermsReal(const int dim,solreal *dev_Ptr);
//**************************************************************************************************
__global__ void krnlSetValReal(const int dim,const solreal val,solreal *dev_Ptr);
//**************************************************************************************************
__global__ void krnlSetToZerosInt(int *dev_Ptr);
//**************************************************************************************************
__global__ void krnlSetToZerosReal(solreal *dev_Ptr);
//**************************************************************************************************
__global__ void krnlTst(int dim,solreal *dev_Ptr);
__global__ void krnlTstInt(int dim,int *dev_Ptr);
//**************************************************************************************************
__device__ double atomicAdd(double* address, double val);
//**************************************************************************************************
#endif /* defined(_SOL_CUDA_TOOLS_CUH_) */



